package com.concurrent.ex02;

/**
 *  ~/concurrent/ex01
 *
 *  # 멀티테스킹(multi-tasking)
 *
 *  한개의 CPU가 여러 코드를 동시에 실행하여 효율을 높힐 수 있다.
 *  CPU가 실행시간을 쪼개어 코드를 병행(Concurrent)하여 실행한다.
 *
 *  ! 병행(Concurrent)와 병렬(Parallels)는 다르다.
 *  병행은 한 CPU에서 여러 프로세스를 처리한다면
 *  병령은 여러 CPU에서 한 가지 프로세스를 [동시에] 처리하는 것이다.
 *
 *  CPU Schedulling 방법에는 여러가지가 있으며
 *  Windows - RR (Rount Robin)
 *  ㄴ CPU의 실행 시간을 일정하게 쪼개어 각 프로세스에 배분한다.
 *  Unix, Linux - Priority 를 사용한다.
 *  ㄴ 각 프로세스에 우선순위를 주어 우선순위가 높은 프로그램부터 실행한다.
 *      ㄴ 이때 ! 우선순위가 낮아 계속 밀리는 프로그램에게는 " Aging " 을 주어
 *         우선순위를 높혀 언젠간 실행이 되도록 한다.
 *
 *  ## 멀티태스킹을 구현하는방법
 *      1. 멀티 프로세싱
 *      2. 멀티 스레딩
 *
 *      * 멀티 프로세싱
 *      실행중인 프로그램을 복제하여 분기하고
 *      분기된 프로세스를 실행시켜 작업을 동시에 진행한다.
 *      이는 프로세스를 분기시키기 좋다(fork()호출 !윈도우는 없음)
 *      - 구현하기가 편하다.
 *
 *      하지만 프로세스를 그대로 복제하기 때문에 프로세스가 사용하는
 *      메모리도 복제되어 낭비가 심하게 된다.
 *      또한 복제된 프로세스도 독립적으로 각각 종료를 시켜야 한다.
 *
 *      * 멀티 스레딩
 *      특정 코드만 분리하여 실행한다.
 *      따라서 프로세스가 사용하는 메모리를 공유한다.
 *      이는 메모리의 낭비가 줄어들며 모든 스레드가 프로세스에 종속되기 때문에
 *      프로세스를 종료하면 스레드도 자동으로 종료된다.
 *
 *      다만 코드를 구현하기 복잡해진다.
 *
 *  ## 컨텍스트 스위칭
 *      CPU의 실행 시간을 쪼개 이 코드 저 코드 실행할 때 마다
 *      실행 위치 및 정보(Context)를 저장하고 로딩하는 과정이 필요하다.
 *      이 과정을 컨텍스트 스위칭 이라 부른다.
 */

// 쓰레드 맛보기
public class MainT {
    public static void main(String[] args) {
        // 위에서 구현한 Thread의 run()을 실행시킨다.
        // 이때 start()를 사용한다.
        new MyThread().start();

        // 이건 main()메서드의 기본 흐름
        for (int i=0; i<10000; i++){
            System.out.println("~~~~c~~~~>>"+i);
        }
    }

    static class MyThread extends Thread{

        @Override
        public void run() {
            for(int i=0; i<10000; i++){
                System.out.println("=T=>>"+i);
            }
        }
    }
}

/**
 *  출력은
 *  main의 기본흐름과
 *  Thread 의 흐름이 섞여서 출력된다.
 *  
 *  [출력]
 * ~~~~c~~~~>>0
 * ~~~~c~~~~>>1
 * =T=>>0
 * ~~~~c~~~~>>2
 * =T=>>1
 * ~~~~c~~~~>>3
 * =T=>>2
 * ~~~~c~~~~>>4
 * =T=>>3
 *
 */